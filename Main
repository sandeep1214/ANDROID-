implementation("com.squareup.retrofit2:retrofit:2.9.0") 
implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
def lifecycle_version = "2.6.0-alpha01"
// ViewModel 
implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version") 
// ViewModel utilities for Compose 
implementation("androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycle_version") 
// LiveData 
implementation("androidx.lifecycle:lifecycle-live data-ktx:$lifecycle_version") 
implementation 'com.github.bumptech.glide:glide:4.13.2'
buildFeatures { 
    viewBinding = true
}
data class Movies( 
    val page: Int, 
    val results: List<Result>, 
    val total_pages: Int, 
    val total_results: Int 
)
data class Result( 
    val adult: Boolean, 
    val backdrop_path: String, 
    val genre_ids: List<Int>, 
    val id: Int, 
    val original_language: String, 
    val original_title: String, 
    val overview: String, 
    val popularity: Double, 
    val poster_path: String, 
    val release_date: String, 
    val title: String, 
    val video: Boolean, 
    val vote_average: Double, 
    val vote_count: Int 
)
interface MovieApi { 
      @GET("popular?") 
      fun getPopularMovies(@Query("api_key") api_key : String) : Call<Movies>       
}
object RetrofitInstance { 
    val api : MovieApi by lazy { 
        Retrofit.Builder() 
            .baseUrl("https://api.themoviedb.org/3/movie/") 
            .addConverterFactory(GsonConverterFactory.create()) 
            .build() 
            .create(MovieApi::class.java) 
    } 
}
<?xml version="1.0" encoding="utf-8"?> 
<androidx.constraintlayout.widget.ConstraintLayout 
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity"> 
    
    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/rv_movies"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        tools:listitem="@layout/movie_layout"> 
    </androidx.recyclerview.widget.RecyclerView> 
    
</androidx.constraintlayout.widget.ConstraintLayout>
<?xml version="1.0" encoding="utf-8"?> 
<androidx.constraintlayout.widget.ConstraintLayout 
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    xmlns:app="http://schemas.android.com/apk/res-auto"> 
    
    <ImageView
        android:id="@+id/movieImage"
        android:layout_width="200dp"
        android:layout_height="200dp"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:scaleType="fitCenter"
        android:src="@color/teal_200"> 
    </ImageView> 
    
    <TextView
        android:id="@+id/movieName"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintTop_toBottomOf="@id/movieImage"
        android:textSize="30dp"
        android:text="Movie Name"
        android:textAlignment="center"
        android:textColor="@color/black"
        android:textStyle="bold"
        android:layout_marginTop="5dp">       
    </TextView> 
    
</androidx.constraintlayout.widget.ConstraintLayout>
class MovieAdapter : RecyclerView.Adapter<MovieAdapter.ViewHolder>() { 
    private var movieList = ArrayList<Result>() 
    fun setMovieList(movieList : List<Result>){ 
        this.movieList = movieList as ArrayList<Result> 
         notifyDataSetChanged() 
    } 
    class ViewHolder(val binding : MovieLayoutBinding) : RecyclerView.ViewHolder(binding.root)  {} 
    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder { 
        return ViewHolder( 
          MovieLayoutBinding.inflate( 
              LayoutInflater.from( 
                  parent.context 
              ) 
          ) 
        ) 
    } 
    override fun onBindViewHolder(holder: ViewHolder, position: Int) { 
   Glide.with(holder.itemView) 
    .load("https://image.tmdb.org/t/p/w500"+movieList[position].poster_path) 
    .into(holder.binding.movieImage) 
holder.binding.movieName.text = movieList[position].title 
    } 
    override fun getItemCount(): Int { 
       return movieList.size 
    } 
class MovieViewModel : ViewModel() { 
    private var movieLiveData = MutableLiveData<List<Result>>() 
  fun getPopularMovies() { 
      RetrofitInstance.api.getPopularMovies("69d66957eebff9666ea46bd464773cf0").enqueue(object  : Callback<Movies>{ 
          override fun onResponse(call: Call<Movies>, response: Response<Movies>) { 
                    if (response.body()!=null){ 
                        movieLiveData.value = response.body()!!.results 
                    } 
              else{ 
                  return
                    } 
          } 
          override fun onFailure(call: Call<Movies>, t: Throwable) { 
                Log.d("TAG",t.message.toString()) 
          } 
      }) 
  } 
    fun observeMovieLiveData() : LiveData<List<Result>> { 
        return movieLiveData 
    } 
} 
class MainActivity : AppCompatActivity() {   
    private lateinit var binding : ActivityMainBinding 
    private lateinit var viewModel: MovieViewModel 
    private lateinit var movieAdapter : MovieAdapter 
    override fun onCreate(savedInstanceState: Bundle?) { 
        super.onCreate(savedInstanceState) 
        binding = ActivityMainBinding.inflate(layoutInflater) 
        setContentView(binding.root) 
        prepareRecyclerView() 
        viewModel = ViewModelProvider(this)[MovieViewModel::class.java] 
        viewModel.getPopularMovies() 
        viewModel.observeMovieLiveData().observe(this, Observer { movieList -> 
          movieAdapter.setMovieList(movieList) 
        }) 
} 
      
private fun prepareRecyclerView() { 
        movieAdapter = MovieAdapter() 
        binding.rvMovies.apply { 
          layoutManager = GridLayoutManager(applicationContext,2) 
           adapter = movieAdapter 
        } 
    } 
}



